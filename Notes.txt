# Dockerfile
=>

FROM node (Qual tecnologia vai ser utilizada)

WORKDIR /app (escolhe o diretório que vai ser usado, dentro do container, quando ele for criado)

COPY . /app (o primeiro ponto indica do todos os arquivos da pasta serão copiados para dentro do container no diretório /app que foi definido como WORKDIR)

RUN npm install (a imagem roda esse comando para instalar as dependências dentro do container)

EXPOSE 80 (qual porta o container vai precisar escutar)

CMD ["node", "server.js"] (esse comando gera um container, com o server.js, toda vez que ele é rodado)

--------------------------------------------------------------------------------------------------------

EXPOSE & A Little Utility Functionality
In the last lecture, we started a container which also exposed a port (port 80).

I just want to clarify again, that EXPOSE 80 in the Dockerfile in the end is optional. It documents that a process in the container will expose this port. But you still need to then actually expose the port with -p when running docker run. So technically, -p is the only required part when it comes to listening on a port. Still, it is a best practice to also add EXPOSE in the Dockerfile to document this behavior.

As an additional quick side-note: For all docker commands where an ID can be used, you don't always have to copy / write out the full id.

You can also just use the first (few) character(s) - just enough to have a unique identifier.

So instead of

docker run abcdefg
you could also run

docker run abc
or, if there's no other image ID starting with "a", you could even run just:

docker run a
This applies to ALL Docker commands where IDs are needed.

--------------------------------------------------------------------------------------------------------

# docker build . (cria uma docker image baseado no Dockerfile) 
=> writing image sha256:1f334ce8c9b3e8760ac1d9f5173427982ef7bc5bfff948c23d501e6d116dae3c (exemplo de docker image id)

--------------------------------------------------------------------------------------------------------

# docker run -p 3000:3000 sha256:1f334ce8c9b3e8760ac1d9f5173427982ef7bc5bfff948c23d501e6d116dae3c (rodando esse comando é possível criar um container baseado na docker image definida anteriormente)
# <docker run -p (publish) 3000 (chosen local port):80 (container defined internal port) sha256:1f334ce8c9b3e8760ac1d9f5173427982ef7bc5bfff948c23d501e6d116dae3c>

--------------------------------------------------------------------------------------------------------

# Abrir outro terminal 
=> rodar: docker ps (com isso, pegar o nome do container running)
=> docker stop <nome do container>

--------------------------------------------------------------------------------------------------------

# docker run node (roda a imagem do node do docker hub)

--------------------------------------------------------------------------------------------------------

# docker ps -a (mostra todos os containers criados)

--------------------------------------------------------------------------------------------------------

# docker run -it node (acessa o terminal interativo do node dentro do container. Aparece a versão do node dentro do container)
=> To exit, press ^C again or ^D or type .exit

--------------------------------------------------------------------------------------------------------

# node -v (verifica a versão do node fora do container. Não precisa ter node externo ao container)

--------------------------------------------------------------------------------------------------------

# Toda vez que os comandos <docker run -it node> ou <docker run node> são aplicados, é criado um container com a imagem do node

--------------------------------------------------------------------------------------------------------

# When we make changes in the code it is necessary to build another image with the changes (docker images are closed templates)

--------------------------------------------------------------------------------------------------------

# Essa mudança na ordem das layers ajuda a deixar o build da docker image mais rápida
# Só é rodada a layer que teve a alteração e as layers abaixo, ou seja, se ocorreu alguma
# Alteração no código do server.js (node.js) é rodado <COPY . /app>, <EXPOSE 80>, <CMD ["node", "server.js"]>
# Ganhando tempo. Na configuração anterior era rodada a layer <RUN npm install> de forma desnecessária toda vez 
# que ocorria uma alteração no código

FROM node

WORKDIR /app

COPY package.json /app

RUN npm install

COPY . /app

EXPOSE 80

CMD ["node", "server.js"]

--------------------------------------------------------------------------------------------------------

# docker --help

--------------------------------------------------------------------------------------------------------

# docker ps --help

--------------------------------------------------------------------------------------------------------

# docker run <docker image> (cria um novo container)

--------------------------------------------------------------------------------------------------------

# Restart a stopped container 

=> Pesquisar eles com <docker ps -a>
=> docker start <container name> (esse comando não bloqueia o terminal (o container roda em background) como o: docker run <docker image> (o container roda em foreground)).
=> Verificar que o container está rodando com: docker ps (mostra somente os containers running)

--------------------------------------------------------------------------------------------------------

# Attach mode
=> Bloqueia o terminal quando roda um container (é uma boa escolha quando a aplicação retorna algo para o terminal)
=> docker start -a <container name> (deixa o comando no attach mode)

--------------------------------------------------------------------------------------------------------

# Detached mode
=> Deixa o terminal liberado enquanto roda um container
=> docker run -p 8000:80 -d 5b83841cf749
=> 4f57cd83e0f5a6d61c9103069809a7de5e8a1d29c859d33704ac548f1dc755aa (id do container criado)
=> You can attach yourself to a detached container with: 
# docker attach <container name>

--------------------------------------------------------------------------------------------------------

# Docker logs
=> Fetch the logs of a container

# docker logs <container name>
# docker logs -f <container name> (prende o terminal nos logs do container)

--------------------------------------------------------------------------------------------------------

# Python with docker

FROM python

WORKDIR /app

COPY . /app

CMD ["python", "rng.py"]

# docker build .

# docker run -it <docker image> (cria o container e deixa ele interativo)
=> Depois que terminar a interação, o container para de rodar

# docker start -a -i <container name> (restart do container)
=> Depois que terminar a interação, o container para de rodar

--------------------------------------------------------------------------------------------------------

# Deleting images and containers

--------------------------------------------------------------------------------------------------------

# Deleting containers

=> docker rm <container name> (somente para containers que não estão rodando)
=> docker rm <container name> <container name> <container name> ...

=> Deletar todos os containers de uma só vez
=> docker container prune

=> --rm (remove o container automaticamente quando ele para de rodar)
=> docker run -p 3000:80 -d --rm fb3cd16af0ae

--------------------------------------------------------------------------------------------------------

# Deleting images

=> List images
=> docker images

=> docker rmi <image id> (Só é possível remover, se a imagem não estiver sendo usada por containers)
=> docker rmi <image id> <image id> <image id> ...

=> Deletar todos as imagens de uma só vez
=> docker image prune




